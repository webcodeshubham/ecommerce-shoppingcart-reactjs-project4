🥀 E-Commerce Shopping Cart - React JS - Simple Frotend Project🥀

🌿🥀🌳 Points to Remember 🌳🥀🌿

🔥🏆⭐️#1. Mind-Mapping/Project Flow/Project Layout/Project Structure.🔥🏆⭐️

🌺#A. First Setup a Simple React Application with Clean Up Process.
🌺#B. Get the Ingredients on the table first - Node Packages like here, as phosphor-react(React Icons) & react-router-dom (Routings).
🌺#C. Download the dependencies from yarn add (Install the Yarn Package Manager => npm install --global yarn and yarn --version) or npm install.
🌺#D. App.jsx => Start Setting Up - Initial Structure of the Project - App Layout.
🌺#E. App.jsx => Start Setting Up - Routes inside the Project.
🌺#F. App.jsx => Exact Params => The exact param/prop comes into play when you have multiple paths that have similar names like Home - "/".  React router does partial matching. The exact param disables the partial matching for a route and makes sure that it only returns the route if the path is an EXACT match to the current url.
🌺#G. App.jsx => Switch/Routes Inbuilt Components => react-router-dom v6, <Switch /> has been replaced by <Routes />. The switch component looks through all of its child route and it displays the first one whose path matches the current URL. It displays the one Route at a time.
🌺#H. App.jsx/Individual Components/Containers(Pages) => App Layout => Components & Containers(Pages) Layout.
🌺#I. All Files & Folders must be Inside src dir. Relative imports outside of /src/ are not supported.
🌺#J. Build the Components for NavBar, Shopping, & Cart Pages with its own Inputs, Outputs, and its Functionality.
🌺#K. Build the Shopping Cart Page => HTML, CSS, and JavaScript.
🌺#L. products.js => App.jsx => Create a Static Database as an Array of Objects for Products and then map them using Array Map Method.
🌺#M. Create & Style the Shopping & Product Component.
🌺#N. Add the Button Functionality along with Stylings for the Shopping Cart Landing Page.
🌺#O. 
🌺#P. 
🌺#Q. 
🌺#R. 
🌺#S. 
🌺#T. 
🌺#U. 

🔥🥀 Important Notes 🥀🔥

🌿🍃🌳 Contents - Connect the Dots 🌳🍃🌿

✅#A. Explore all the features of the Project.
✅#B. Get the TMDB API Key.
✅#C. Create the React Application.
✅#D. Setup your Deployment Platform - Firebase Hosting.
✅#E. Get all the Movies.
✅#F. Build the Posters Rows.
✅#G. Build the Banner.
✅#H. Build the Navbar.
✅#I. Add the Trailer Pop-ups Functionality.
✅#J. Deploy App to Firebase.

🔥🥀 Detailed Explaination of Important Notes 🥀🔥

✅#B. Get the TMDB API Key.

🌱#1. Register for TMDB.
🌱#2. Apply for Fake API Key.
🌱#3. Copy the Fake API Key & Request Endpoint URL for reference & fetching movies of different genres.
🌱#4. Test your Server/API Endpoints with API Key on Postman API Testing Platform.

✅#C. Create the React Application.

🌱#1. Create the React App using create-react-app Command using NPX(Node Package Execution Tool) & NPM Start.
🌱#2. Files & Folders - React App Clean up.

✅#D. Setup your Deployment Platform - Firebase Hosting.

🌱#1. Create the Project & Setup for Web Application.
🌱#2. No need to setup the Firebase SDK - Node Modules.
🌱#3. Install the sudo npm i -g firebase-tools inside the project using NPM (Node Package Manager).
🌱#4. Configure or Setup your Firebase Hosting.

✅#E. Get all the Movies & ✅#F. Build the Posters Rows.

🌱#1. Setup your Server/API Request Endpoints as Object in functional module as requests.js to lay our urls shorter and easier to use. Also, using the url parameters as &with_genre=23.
🌱#2. Setup your Request Sender using Axios Package in axios.js.
🌱#3. Build the Complete App Outline/Layout inside the Home Container and Call the Home Container inside the App Component.
🌱#4. Build the Outline/Layout of Row Component.
🌱#5. Props are Properties/Args allows us to pass different values to the same component using args/params. Every Component holds a prop object. 
🌱#6. Fetch the API inside Row Component using Async-Await Function, useEffect Hook & Axios Package - Request Sender. Also, in order to visualize the console.table(data).
🌱#7. State is the short-term/temporary memory inside the App Component. useState Hook is a way of writing the variables in React.
🌱#8. Store & Update the movies inside Row Component using useState Hook.
🌱#9. Build the JSX of Row Component and Map all the movies.
🌱#10. Use the Block-Element-Modifier (BEM) Model to specify the className in React in order to style your Components. Use Double Under Score in BEM Model.
🌱#11. Render all the movies.
🌱#12. Apply the Conditional Styling for the Large Rows (Netflix) & Conditionally display the Thumbnail & Poster Image.


✅#G. Build the Banner.

🌱#1. Build the Layout/Outline for the Banner Component (BEM) Model.
🌱#2. Write the logic for random movie using the Math Class Method.
🌱#3. Store & Update the Random Movie inside the movie state variable using useState Hook.
🌱#4. Embedd the Banner Image using React Inline Object Styling. Using Ternary Operator for movie existence.
🌱#5. OR Operator || for movie title, name or original_name.
🌱#6. Understand the Text Truncated Function in Movie Description.
🌱#7. Add the linear-gradient Style in banner--fadeBottom (BEM).

✅#H. Build the Navbar.

🌱#1. Build the Layout/Outline for the Banner Component (BEM) Model.
🌱#2. Add the Styles for NavBar.
🌱#3. Add the Functionality of the Scrollbar Event Listener & add the specific style on the Event using useEffect & useState Hooks.
🌱#4. Add the Animation in the Scrollbar Navigation.

✅#I. Add the Trailer Pop-ups Functionality.

🌱#1. Install the React Packages - React-Youtube and movie-trailer.
🌱#2. Add the Trailer Pop-up Functionality underneath a Row__Posters Container in Row Component using both node packages.
🌱#3. Use the Promises (then and catch) URLSearchParams and get the value of url paramter i.e. "v".

✅#J. Deploy App to Firebase.

🌱#1. Firebase Login:- Login to Firebase Hosting Server.
🌱#2. firebase init.
🌱#3. Select the Hosting Server & Hit Spacebar to Select the Option and then hit Enter.
🌱#4. Select the Existing Project.
🌱#5. Select the Project Name for Deployment.
🌱#6. Use public directory for Build.
🌱#7. Configure SAP as Yes - 'y'.
🌱#8. Automatic Build and Deploys with GitHub.
🌱#9. Authenticate with GitHub Account and Firebase Account.
🌱#10. Mention your Github Repository Name.
🌱#11. <npm ci && npm run build> for specific files and directories for Deployment.
🌱#12. Name of GitHub Branch as main --> Initilization Completed.
🌱#13. Run the <firebase deploy>
